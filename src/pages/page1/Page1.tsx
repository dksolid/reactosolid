import { Button } from 'comp/button';
import { useStore, ViewModel } from 'hooks/useStore';
import { TypeGlobals } from 'models';
import { transformers } from 'compSystem/transformers';

import styles from './Page1.scss';

class VM implements ViewModel {
  constructor(public context: TypeGlobals) {
    return transformers.makeAutoObservable(this);
  }

  afterMount() {
    void this.context.actions.routing.setMetaData({
      title: 'Page 1',
    });
  }

  handleRaiseConfirm() {
    void this.context.actions.ui.confirmRaise({
      title: 'asd',
    });
  }

  handleRaiseModal() {
    void this.context.actions.ui.modalRaise({
      component: 'Example',
      componentProps: { text: 'asd' },
    });
  }

  handleRaiseNotification() {
    void this.context.actions.ui.notificationRaise({
      type: 'success',
      message: `test ${Math.random()}`,
      delay: 5000,
    });
  }
}

export function Page1() {
  const { vm } = useStore(VM);

  return (
    <div className={styles.page}>
      <div className={styles.introduction}>
        <p>
          This page is generated by AI, but Components Examples are real, use them to test
          reactivity
        </p>
        <div className={styles.buttonContainer}>
          <h3>UI Component Examples:</h3>
          <div className={styles.buttons}>
            <Button type={'blue'} onClick={vm.handleRaiseConfirm}>
              confirm
            </Button>
            <Button type={'blue'} onClick={vm.handleRaiseModal}>
              modal
            </Button>
            <Button type={'blue'} onClick={vm.handleRaiseNotification}>
              notification
            </Button>
          </div>
        </div>
        <p>
          In the ever-evolving landscape of frontend development, choosing the right UI library can
          significantly impact your project's performance, developer experience, and
          maintainability. Let's explore three popular options: Solid.js, React, and Preact.
        </p>
      </div>

      <div className={styles.comparisonGrid}>
        {/* Solid.js Column */}
        <div className={styles.libraryColumn}>
          <h2 className={styles.libraryTitle}>Solid.js</h2>
          <div className={styles.libraryContent}>
            <h3>Pros</h3>
            <ul>
              <li>True reactivity without Virtual DOM</li>
              <li>Excellent performance metrics</li>
              <li>Small bundle size (~ 7kb)</li>
              <li>Familiar JSX syntax</li>
              <li>Fine-grained updates without re-rendering components</li>
            </ul>

            <h3>Cons</h3>
            <ul>
              <li>Smaller ecosystem compared to React</li>
              <li>Fewer learning resources available</li>
              <li>Smaller community for support</li>
              <li>Less mature tooling</li>
            </ul>
          </div>
        </div>

        {/* React Column */}
        <div className={styles.libraryColumn}>
          <h2 className={styles.libraryTitle}>React</h2>
          <div className={styles.libraryContent}>
            <h3>Pros</h3>
            <ul>
              <li>Massive ecosystem and community</li>
              <li>Abundant learning resources</li>
              <li>Strong corporate backing (Facebook/Meta)</li>
              <li>Mature tooling and developer experience</li>
              <li>Wide job market opportunities</li>
            </ul>

            <h3>Cons</h3>
            <ul>
              <li>Virtual DOM adds overhead</li>
              <li>Larger bundle size</li>
              <li>Component re-rendering can impact performance</li>
              <li>Frequent API changes and deprecations</li>
            </ul>
          </div>
        </div>

        {/* Preact Column */}
        <div className={styles.libraryColumn}>
          <h2 className={styles.libraryTitle}>Preact</h2>
          <div className={styles.libraryContent}>
            <h3>Pros</h3>
            <ul>
              <li>Tiny size (~ 3kb)</li>
              <li>API compatibility with React</li>
              <li>Better performance than React in many cases</li>
              <li>Easy migration path from React</li>
              <li>Simpler internal implementation</li>
            </ul>

            <h3>Cons</h3>
            <ul>
              <li>Some React features may be missing or different</li>
              <li>Smaller ecosystem than React</li>
              <li>Some React libraries may not work without adaptation</li>
              <li>Less corporate backing</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
